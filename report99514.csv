Commit SHA,Java File,Old Function Signature,New Function Signature
9b6c3a50934204e272082848614267e57ea57de8,src/jvm/clojure.lang.Compiler.InvokeExpr,"public InvokeExpr(source String, line int, column int, tag Symbol, fexpr Expr, args IPersistentVector)","public InvokeExpr(source String, line int, column int, tag Symbol, fexpr Expr, args IPersistentVector, tailPosition boolean)"
9b6c3a50934204e272082848614267e57ea57de8,src/jvm/clojure.lang.Compiler.InstanceMethodExpr,"public InstanceMethodExpr(source String, line int, column int, tag Symbol, target Expr, methodName String, args IPersistentVector)","public InstanceMethodExpr(source String, line int, column int, tag Symbol, target Expr, methodName String, args IPersistentVector, tailPosition boolean)"
9b6c3a50934204e272082848614267e57ea57de8,src/jvm/clojure.lang.Compiler.StaticMethodExpr,"public StaticMethodExpr(source String, line int, column int, tag Symbol, c Class, methodName String, args IPersistentVector)","public StaticMethodExpr(source String, line int, column int, tag Symbol, c Class, methodName String, args IPersistentVector, tailPosition boolean)"
c8e248d84740dbe1538c6f86ff1ecc59e200d23a,src/jvm/clojure.lang.Compiler.NewInstanceExpr,"package build(interfaceSyms IPersistentVector, fieldSyms IPersistentVector, thisSym Symbol, tagName String, className Symbol, typeTag Symbol, methodForms ISeq, frm Object) : ObjExpr","package build(interfaceSyms IPersistentVector, fieldSyms IPersistentVector, thisSym Symbol, tagName String, className Symbol, typeTag Symbol, methodForms ISeq, frm Object, opts IPersistentMap) : ObjExpr"
1f37a868e7ed154e8d0e0dc9e6de46c10478ac81,src/jvm/clojure.lang.Tuple,public createFromColl(coll Object) : IPersistentVector,"public createFromColl(count int, coll Object) : IPersistentVector"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.CharacterReader,"public invoke(reader Object, backslash Object) : Object","public invoke(reader Object, backslash Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.CommentReader,"public invoke(reader Object, semicolon Object) : Object","public invoke(reader Object, semicolon Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.RegexReader,"public invoke(reader Object, doublequote Object) : Object","public invoke(reader Object, doublequote Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.StringReader,"public invoke(reader Object, doublequote Object) : Object","public invoke(reader Object, doublequote Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.UnmatchedDelimiterReader,"public invoke(reader Object, rightdelim Object) : Object","public invoke(reader Object, rightdelim Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.UnreadableReader,"public invoke(reader Object, leftangle Object) : Object","public invoke(reader Object, leftangle Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.EvalReader,"public invoke(reader Object, eq Object) : Object","public invoke(reader Object, eq Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.FnReader,"public invoke(reader Object, lparen Object) : Object","public invoke(reader Object, lparen Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.MetaReader,"public invoke(reader Object, caret Object) : Object","public invoke(reader Object, caret Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.ArgReader,"public invoke(reader Object, pct Object) : Object","public invoke(reader Object, pct Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.ListReader,"public invoke(reader Object, leftparen Object) : Object","public invoke(reader Object, leftparen Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.DeprecatedWrappingReader,"public invoke(reader Object, quote Object) : Object","public invoke(reader Object, quote Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.CtorReader,"private readTagged(reader PushbackReader, tag Symbol) : Object","private readTagged(o Object, tag Symbol, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.MapReader,"public invoke(reader Object, leftparen Object) : Object","public invoke(reader Object, leftparen Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.DispatchReader,"public invoke(reader Object, hash Object) : Object","public invoke(reader Object, hash Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.SyntaxQuoteReader,"public invoke(reader Object, backquote Object) : Object","public invoke(reader Object, backquote Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.UnquoteReader,"public invoke(reader Object, comma Object) : Object","public invoke(reader Object, comma Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.VarReader,"public invoke(reader Object, quote Object) : Object","public invoke(reader Object, quote Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.WrappingReader,"public invoke(reader Object, quote Object) : Object","public invoke(reader Object, quote Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.VectorReader,"public invoke(reader Object, leftparen Object) : Object","public invoke(reader Object, leftparen Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.SetReader,"public invoke(reader Object, leftbracket Object) : Object","public invoke(reader Object, leftbracket Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.DiscardReader,"public invoke(reader Object, underscore Object) : Object","public invoke(reader Object, underscore Object, opts Object, pendingForms Object) : Object"
caa3b4fdc8da5880309b317d0045b1280181c452,src/jvm/clojure.lang.LispReader.CtorReader,"private readRecord(r PushbackReader, recordName Symbol) : Object","private readRecord(form Object, recordName Symbol, opts Object, pendingForms Object) : Object"
ecdfafb9665d3938330c91267381d01536a691b1,src/jvm/clojure.lang.APersistentMap.KeySeq,"private KeySeq(meta IPersistentMap, seq ISeq)","private KeySeq(meta IPersistentMap, seq ISeq, iterable Iterable)"
ecdfafb9665d3938330c91267381d01536a691b1,src/jvm/clojure.lang.APersistentMap.ValSeq,"private ValSeq(meta IPersistentMap, seq ISeq)","private ValSeq(meta IPersistentMap, seq ISeq, iterable Iterable)"
d760db170414d770ec348e906eb4d73ed42f1f90,src/jvm/clojure.lang.PersistentArrayMap.Iter,package Iter(array Object[]),"package Iter(array Object[], f IFn)"
d760db170414d770ec348e906eb4d73ed42f1f90,src/jvm/clojure.lang.PersistentArrayMap.Iter,"package Iter(array Object[], i int)","package Iter(array Object[], i int, f IFn)"
59889fdeb7ef7f4f73e13fa6ecb627f62b7d2adb,src/jvm/clojure.lang.Compiler.DefExpr,"public DefExpr(source String, line int, column int, var Var, init Expr, meta Expr, initProvided boolean, isDynamic boolean)","public DefExpr(source String, line int, column int, var Var, init Expr, meta Expr, initProvided boolean, isDynamic boolean, shadowsCoreMapping boolean)"
20a9547c7bf84db4cb2be8497371b8cd813f41e3,src/jvm/clojure.lang.Compiler.ObjExpr,package getCompiledClass() : Class,package getCompiledClass(loader DynamicClassLoader) : Class
5fda6cb262d1807566ecadd3af9aaafb58ee5544,src/jvm/clojure.lang.Compiler.InstanceFieldExpr,"public InstanceFieldExpr(line int, column int, target Expr, fieldName String, tag Symbol)","public InstanceFieldExpr(line int, column int, target Expr, fieldName String, tag Symbol, requireField boolean)"
c8d3ef3929e8049a84957002bc7e2071844bfb53,src/jvm/clojure.asm.AnnotationWriter,"package put(panns AnnotationWriter[], out ByteVector) : void","package put(panns AnnotationWriter[], off int, out ByteVector) : void"
c8d3ef3929e8049a84957002bc7e2071844bfb53,src/jvm/clojure.asm.commons.AdviceAdapter,"public AdviceAdapter(mv MethodVisitor, access int, name String, desc String)","protected AdviceAdapter(api int, mv MethodVisitor, access int, name String, desc String)"
c8d3ef3929e8049a84957002bc7e2071844bfb53,src/jvm/clojure.asm.ClassReader,private readClass(is InputStream) : byte[],"private readClass(is InputStream, close boolean) : byte[]"
c8d3ef3929e8049a84957002bc7e2071844bfb53,src/jvm/clojure.asm.ClassReader,"private readParameterAnnotations(v int, buf char[], visible boolean, mv MethodVisitor) : void","private readParameterAnnotations(v int, desc String, buf char[], visible boolean, mv MethodVisitor) : void"
4671019d78fc7b83768b5cb1e7bb4c699f24af3e,src/jvm/clojure.lang.EdnReader,"private readToken(r PushbackReader, initch char) : String","private readToken(r PushbackReader, initch char, leadConstituent boolean) : String"
692817a10283c98c5d57bf3515ba39cf533d7aad,src/jvm/clojure.lang.EdnReader.CharacterReader,"public invoke(reader Object, backslash Object) : Object","public invoke(reader Object, backslash Object, opts Object) : Object"
692817a10283c98c5d57bf3515ba39cf533d7aad,src/jvm/clojure.lang.EdnReader.CommentReader,"public invoke(reader Object, semicolon Object) : Object","public invoke(reader Object, semicolon Object, opts Object) : Object"
692817a10283c98c5d57bf3515ba39cf533d7aad,src/jvm/clojure.lang.EdnReader.StringReader,"public invoke(reader Object, doublequote Object) : Object","public invoke(reader Object, doublequote Object, opts Object) : Object"
692817a10283c98c5d57bf3515ba39cf533d7aad,src/jvm/clojure.lang.EdnReader.UnmatchedDelimiterReader,"public invoke(reader Object, rightdelim Object) : Object","public invoke(reader Object, rightdelim Object, opts Object) : Object"
692817a10283c98c5d57bf3515ba39cf533d7aad,src/jvm/clojure.lang.EdnReader.UnreadableReader,"public invoke(reader Object, leftangle Object) : Object","public invoke(reader Object, leftangle Object, opts Object) : Object"
692817a10283c98c5d57bf3515ba39cf533d7aad,src/jvm/clojure.lang.EdnReader,"public read(r PushbackReader, eofIsError boolean, eofValue Object, isRecursive boolean) : Object","public read(r PushbackReader, eofIsError boolean, eofValue Object, isRecursive boolean, opts Object) : Object"
692817a10283c98c5d57bf3515ba39cf533d7aad,src/jvm/clojure.lang.EdnReader.MetaReader,"public invoke(reader Object, caret Object) : Object","public invoke(reader Object, caret Object, opts Object) : Object"
692817a10283c98c5d57bf3515ba39cf533d7aad,src/jvm/clojure.lang.EdnReader.ListReader,"public invoke(reader Object, leftparen Object) : Object","public invoke(reader Object, leftparen Object, opts Object) : Object"
692817a10283c98c5d57bf3515ba39cf533d7aad,src/jvm/clojure.lang.EdnReader,"public readDelimitedList(delim char, r PushbackReader, isRecursive boolean) : List","public readDelimitedList(delim char, r PushbackReader, isRecursive boolean, opts Object) : List"
692817a10283c98c5d57bf3515ba39cf533d7aad,src/jvm/clojure.lang.EdnReader.MapReader,"public invoke(reader Object, leftparen Object) : Object","public invoke(reader Object, leftparen Object, opts Object) : Object"
692817a10283c98c5d57bf3515ba39cf533d7aad,src/jvm/clojure.lang.EdnReader.SetReader,"public invoke(reader Object, leftbracket Object) : Object","public invoke(reader Object, leftbracket Object, opts Object) : Object"
692817a10283c98c5d57bf3515ba39cf533d7aad,src/jvm/clojure.lang.EdnReader.VectorReader,"public invoke(reader Object, leftparen Object) : Object","public invoke(reader Object, leftparen Object, opts Object) : Object"
692817a10283c98c5d57bf3515ba39cf533d7aad,src/jvm/clojure.lang.EdnReader.DiscardReader,"public invoke(reader Object, underscore Object) : Object","public invoke(reader Object, underscore Object, opts Object) : Object"
692817a10283c98c5d57bf3515ba39cf533d7aad,src/jvm/clojure.lang.EdnReader,public readString(s String) : Object,"public readString(s String, opts IPersistentMap) : Object"
692817a10283c98c5d57bf3515ba39cf533d7aad,src/jvm/clojure.lang.EdnReader.DispatchReader,"public invoke(reader Object, hash Object) : Object","public invoke(reader Object, hash Object, opts Object) : Object"
6bbfd943766e11e52a3fe21b177d55536892d132,src/jvm/clojure.lang.Compiler.InvokeExpr,"public InvokeExpr(source String, line int, tag Symbol, fexpr Expr, args IPersistentVector)","public InvokeExpr(source String, line int, column int, tag Symbol, fexpr Expr, args IPersistentVector)"
6bbfd943766e11e52a3fe21b177d55536892d132,src/jvm/clojure.lang.Compiler.NewExpr,"public NewExpr(c Class, args IPersistentVector, line int)","public NewExpr(c Class, args IPersistentVector, line int, column int)"
6bbfd943766e11e52a3fe21b177d55536892d132,src/jvm/clojure.lang.Compiler.InstanceMethodExpr,"public InstanceMethodExpr(source String, line int, tag Symbol, target Expr, methodName String, args IPersistentVector)","public InstanceMethodExpr(source String, line int, column int, tag Symbol, target Expr, methodName String, args IPersistentVector)"
6bbfd943766e11e52a3fe21b177d55536892d132,src/jvm/clojure.lang.Compiler.StaticMethodExpr,"public StaticMethodExpr(source String, line int, tag Symbol, c Class, methodName String, args IPersistentVector)","public StaticMethodExpr(source String, line int, column int, tag Symbol, c Class, methodName String, args IPersistentVector)"
6bbfd943766e11e52a3fe21b177d55536892d132,src/jvm/clojure.lang.Compiler.CaseExpr,"public CaseExpr(line int, expr LocalBindingExpr, shift int, mask int, low int, high int, defaultExpr Expr, tests SortedMap, thens HashMap, switchType Keyword, testType Keyword, skipCheck Set)","public CaseExpr(line int, column int, expr LocalBindingExpr, shift int, mask int, low int, high int, defaultExpr Expr, tests SortedMap, thens HashMap, switchType Keyword, testType Keyword, skipCheck Set)"
6bbfd943766e11e52a3fe21b177d55536892d132,src/jvm/clojure.lang.Compiler.CompilerException,"public CompilerException(source String, line int, cause Throwable)","public CompilerException(source String, line int, column int, cause Throwable)"
6bbfd943766e11e52a3fe21b177d55536892d132,src/jvm/clojure.lang.Compiler.StaticFieldExpr,"public StaticFieldExpr(line int, c Class, fieldName String, tag Symbol)","public StaticFieldExpr(line int, column int, c Class, fieldName String, tag Symbol)"
6bbfd943766e11e52a3fe21b177d55536892d132,src/jvm/clojure.lang.Compiler.KeywordInvokeExpr,"public KeywordInvokeExpr(source String, line int, tag Symbol, kw KeywordExpr, target Expr)","public KeywordInvokeExpr(source String, line int, column int, tag Symbol, kw KeywordExpr, target Expr)"
6bbfd943766e11e52a3fe21b177d55536892d132,src/jvm/clojure.lang.Compiler.DefExpr,"public DefExpr(source String, line int, var Var, init Expr, meta Expr, initProvided boolean, isDynamic boolean)","public DefExpr(source String, line int, column int, var Var, init Expr, meta Expr, initProvided boolean, isDynamic boolean)"
6bbfd943766e11e52a3fe21b177d55536892d132,src/jvm/clojure.lang.Compiler.InstanceFieldExpr,"public InstanceFieldExpr(line int, target Expr, fieldName String, tag Symbol)","public InstanceFieldExpr(line int, column int, target Expr, fieldName String, tag Symbol)"
6bbfd943766e11e52a3fe21b177d55536892d132,src/jvm/clojure.lang.Compiler.IfExpr,"public IfExpr(line int, testExpr Expr, thenExpr Expr, elseExpr Expr)","public IfExpr(line int, column int, testExpr Expr, thenExpr Expr, elseExpr Expr)"
6bbfd943766e11e52a3fe21b177d55536892d132,src/jvm/clojure.lang.Compiler.RecurExpr,"public RecurExpr(loopLocals IPersistentVector, args IPersistentVector, line int, source String)","public RecurExpr(loopLocals IPersistentVector, args IPersistentVector, line int, column int, source String)"
6bbfd943766e11e52a3fe21b177d55536892d132,src/jvm/clojure.lang.LispReader.ReaderException,"public ReaderException(line int, cause Throwable)","public ReaderException(line int, column int, cause Throwable)"
6bbfd943766e11e52a3fe21b177d55536892d132,src/jvm/clojure.lang.Compiler,"package errorMsg(source String, line int, s String) : String","package errorMsg(source String, line int, column int, s String) : String"
b9b1a094499b69a94bd47fc94c4f082d80239fa9,src/jvm/clojure.lang.Compiler.DefExpr,"public DefExpr(source String, line int, var Var, init Expr, meta Expr, initProvided boolean)","public DefExpr(source String, line int, var Var, init Expr, meta Expr, initProvided boolean, isDynamic boolean)"
6c4961d526a7c114736627250ff874703b987bcb,src/jvm/clojure.lang.PersistentQueue,"package PersistentQueue(meta IPersistentMap, f ISeq, r PersistentVector)","package PersistentQueue(meta IPersistentMap, cnt int, f ISeq, r PersistentVector)"
cc8372f12074b4cccbdd9cde3cfacfae069c57d3,src/jvm/clojure.lang.Reflector,public prepRet(x Object) : Object,"public prepRet(c Class, x Object) : Object"
7652f7e935684d3c7851fbcad8ddce97e510a5a6,src/jvm/clojure.lang.Compiler.RecurExpr,"public RecurExpr(loopLocals IPersistentVector, args IPersistentVector)","public RecurExpr(loopLocals IPersistentVector, args IPersistentVector, line int, source String)"
9ad685bac487eae0e37341b2ff9f642a575d1a0d,src/jvm/clojure.lang.Compiler.StaticInvokeExpr,"public parse(v Var, args ISeq) : Expr","public parse(v Var, args ISeq, tag Symbol) : Expr"
9ad685bac487eae0e37341b2ff9f642a575d1a0d,src/jvm/clojure.lang.Compiler.StaticInvokeExpr,"package StaticInvokeExpr(target Type, retClass Class, paramclasses Class[], paramtypes Type[], variadic boolean, args IPersistentVector)","package StaticInvokeExpr(target Type, retClass Class, paramclasses Class[], paramtypes Type[], variadic boolean, args IPersistentVector, tag Symbol)"
ca737838aa65970775c58cd3a72fea4221a67bda,src/jvm/clojure.lang.Compiler.FnMethod,"package parse(objx ObjExpr, form ISeq) : FnMethod","package parse(objx ObjExpr, form ISeq, isStatic boolean) : FnMethod"
df8b048ab34751256e193e277d92f5a5bc1b53cd,src/jvm/clojure.lang.AFn,public throwArity() : Object,public throwArity(n int) : Object
12b5c5996dc2f9943f2fca075e94990a24cd7d37,src/jvm/clojure.lang.Compiler.NewInstanceExpr,"package compileStub(superName String, ret NewInstanceExpr, interfaceNames String[]) : Class","package compileStub(superName String, ret NewInstanceExpr, interfaceNames String[], frm Object) : Class"
12b5c5996dc2f9943f2fca075e94990a24cd7d37,src/jvm/clojure.lang.Compiler.NewInstanceExpr,"package build(interfaceSyms IPersistentVector, fieldSyms IPersistentVector, thisSym Symbol, tagName String, className String, typeTag Symbol, methodForms ISeq) : ObjExpr","package build(interfaceSyms IPersistentVector, fieldSyms IPersistentVector, thisSym Symbol, tagName String, className String, typeTag Symbol, methodForms ISeq, frm Object) : ObjExpr"
12b5c5996dc2f9943f2fca075e94990a24cd7d37,src/jvm/clojure.lang.DynamicClassLoader,"public defineClass(name String, bytes byte[]) : Class","public defineClass(name String, bytes byte[], srcForm Object) : Class"
76c8f45293987b80e3599535dd86482e1180661d,src/jvm/clojure.lang.Compiler.LocalBinding,"public LocalBinding(num int, sym Symbol, tag Symbol, init Expr, isArg boolean)","public LocalBinding(num int, sym Symbol, tag Symbol, init Expr, isArg boolean, clearPathRoot PathNode)"
76c8f45293987b80e3599535dd86482e1180661d,src/jvm/clojure.lang.Compiler.ObjExpr,"private emitLocal(gen GeneratorAdapter, lb LocalBinding) : void","private emitLocal(gen GeneratorAdapter, lb LocalBinding, clear boolean) : void"
292836f87260fdb994d25a98ef65b4edebf9d09e,src/jvm/clojure.lang.Compiler.NewInstanceExpr,"package build(interfaceSyms IPersistentVector, fieldSyms IPersistentVector, thisSym Symbol, className String, typeTag Symbol, methodForms ISeq) : ObjExpr","package build(interfaceSyms IPersistentVector, fieldSyms IPersistentVector, thisSym Symbol, tagName String, className String, typeTag Symbol, methodForms ISeq) : ObjExpr"
4115b53938c56e282b9de9701a2db474324092bd,src/jvm/clojure.lang.Compiler.InstanceMethodExpr,"public InstanceMethodExpr(source String, line int, target Expr, methodName String, args IPersistentVector)","public InstanceMethodExpr(source String, line int, tag Symbol, target Expr, methodName String, args IPersistentVector)"
4115b53938c56e282b9de9701a2db474324092bd,src/jvm/clojure.lang.Compiler.StaticMethodExpr,"public StaticMethodExpr(source String, line int, c Class, methodName String, args IPersistentVector)","public StaticMethodExpr(source String, line int, tag Symbol, c Class, methodName String, args IPersistentVector)"
4115b53938c56e282b9de9701a2db474324092bd,src/jvm/clojure.lang.Compiler.InstanceFieldExpr,"public InstanceFieldExpr(line int, target Expr, fieldName String)","public InstanceFieldExpr(line int, target Expr, fieldName String, tag Symbol)"
4115b53938c56e282b9de9701a2db474324092bd,src/jvm/clojure.lang.Compiler.StaticFieldExpr,"public StaticFieldExpr(line int, c Class, fieldName String)","public StaticFieldExpr(line int, c Class, fieldName String, tag Symbol)"
aa3f0e61a4f8f2837cd5147cfa72e61418d7b0d8,src/jvm/clojure.lang.Compiler.CaseExpr,"public CaseExpr(line int, expr Expr, shift int, mask int, low int, high int, defaultExpr Expr, tests HashMap, thens HashMap)","public CaseExpr(line int, expr Expr, shift int, mask int, low int, high int, defaultExpr Expr, tests HashMap, thens HashMap, identity boolean)"
6362e0f2522c4f7b2b2e626016b291d4832bb58a,src/jvm/clojure.lang.Compiler.NewInstanceMethod,"package parse(objx ObjExpr, form ISeq, overrideables Map, allmethods Map) : NewInstanceMethod","package parse(objx ObjExpr, form ISeq, thistag Symbol, overrideables Map, allmethods Map) : NewInstanceMethod"
eedcf35479737ab1136e3b8a00b2759190a73fdb,src/jvm/clojure.lang.PersistentHashMap,"public PersistentHashMap(meta IPersistentMap, count int, root INode)","public PersistentHashMap(meta IPersistentMap, count int, root INode, hasNull boolean, nullValue Object)"
eedcf35479737ab1136e3b8a00b2759190a73fdb,src/jvm/clojure.lang.PersistentHashMap.TransientHashMap,"package TransientHashMap(edit AtomicReference, root INode, count int)","package TransientHashMap(edit AtomicReference, root INode, count int, hasNull boolean, nullValue Object)"
e8fc494908acccdd0afd59b7678957b9d27afd68,src/jvm/clojure.lang.PersistentHashMap2.ArrayNode,"package ArrayNode(edit AtomicReference, array INode[])","package ArrayNode(edit AtomicReference, count int, array INode[])"
ad708fc31a924256bdbc9580c7929abc80487f70,src/jvm/clojure.lang.PersistentHashMap2.BitmapIndexedNode,"package editAndSet(i int, a Object) : BitmapIndexedNode","package editAndSet(edit AtomicReference, i int, a Object) : BitmapIndexedNode"
ad708fc31a924256bdbc9580c7929abc80487f70,src/jvm/clojure.lang.PersistentHashMap2.BitmapIndexedNode,"package editAndSet(i int, a Object, j int, b Object) : BitmapIndexedNode","package editAndSet(edit AtomicReference, i int, a Object, j int, b Object) : BitmapIndexedNode"
ad708fc31a924256bdbc9580c7929abc80487f70,src/jvm/clojure.lang.PersistentHashMap2.HashCollisionNode,"package editAndSet(i int, a Object) : HashCollisionNode","package editAndSet(edit AtomicReference, i int, a Object) : HashCollisionNode"
ad708fc31a924256bdbc9580c7929abc80487f70,src/jvm/clojure.lang.PersistentHashMap2.HashCollisionNode,"package editAndSet(i int, a Object, j int, b Object) : HashCollisionNode","package editAndSet(edit AtomicReference, i int, a Object, j int, b Object) : HashCollisionNode"
ad708fc31a924256bdbc9580c7929abc80487f70,src/jvm/clojure.lang.PersistentHashMap2.HashCollisionNode,"package ensureEditable(edit AtomicReference, array Object[]) : HashCollisionNode","package ensureEditable(edit AtomicReference, count int, array Object[]) : HashCollisionNode"
ad708fc31a924256bdbc9580c7929abc80487f70,src/jvm/clojure.lang.PersistentHashMap2.HashCollisionNode,"package HashCollisionNode(edit AtomicReference, hash int, array Object[])","package HashCollisionNode(edit AtomicReference, hash int, count int, array Object[])"
afe49293a08c2023a9457d88f0ff06c46f5a0528,src/jvm/clojure.lang.PersistentHashMap2.TransientHashMap,"package TransientHashMap(edit AtomicReference, root INode, count int)","package TransientHashMap(edit AtomicReference, root INode, count int, hasNull boolean, nullValue Object)"
11bbfdfdb500156afd9ebb36bf452bcb96b3708d,src/jvm/clojure.lang.PersistentHashMap.BitmapIndexedNode,"package create(bitmap int, nodes INode[], shift int) : INode","package create(edit AtomicReference, bitmap int, nodes INode[], shift int) : INode"
11bbfdfdb500156afd9ebb36bf452bcb96b3708d,src/jvm/clojure.lang.PersistentHashMap.BitmapIndexedNode,"package BitmapIndexedNode(bitmap int, nodes INode[], shift int)","package BitmapIndexedNode(edit AtomicReference, bitmap int, nodes INode[], shift int)"
11bbfdfdb500156afd9ebb36bf452bcb96b3708d,src/jvm/clojure.lang.PersistentHashMap.FullNode,"package FullNode(nodes INode[], shift int)","package FullNode(edit AtomicReference, nodes INode[], shift int)"
11bbfdfdb500156afd9ebb36bf452bcb96b3708d,src/jvm/clojure.lang.PersistentHashMap.LeafNode,"public LeafNode(hash int, key Object, val Object)","public LeafNode(edit AtomicReference, hash int, key Object, val Object)"
11bbfdfdb500156afd9ebb36bf452bcb96b3708d,src/jvm/clojure.lang.PersistentHashMap.HashCollisionNode,"public HashCollisionNode(hash int, leaves LeafNode[])","public HashCollisionNode(edit AtomicReference, hash int, leaves LeafNode[])"
11bbfdfdb500156afd9ebb36bf452bcb96b3708d,src/jvm/clojure.lang.PersistentHashMap.BitmapIndexedNode,"package create(shift int, branch INode, hash int, key Object, val Object, addedLeaf Box) : INode","package create(edit AtomicReference, shift int, branch INode, hash int, key Object, val Object, addedLeaf Box) : INode"
17284e6696c888e586d7c03db46065efdf82f50f,src/jvm/clojure.lang.Compiler,"private registerLocal(sym Symbol, tag Symbol, init Expr) : LocalBinding","private registerLocal(sym Symbol, tag Symbol, init Expr, isArg boolean) : LocalBinding"
17284e6696c888e586d7c03db46065efdf82f50f,src/jvm/clojure.lang.Compiler.LocalBinding,"public LocalBinding(num int, sym Symbol, tag Symbol, init Expr)","public LocalBinding(num int, sym Symbol, tag Symbol, init Expr, isArg boolean)"
c5ff863c30917cbc4eb728583f494886806a064e,src/jvm/clojure.lang.Compiler.ObjExpr,"package compile(superName String, interfaceNames String[]) : void","package compile(superName String, interfaceNames String[], oneTimeUse boolean) : void"
53cc7a6c2ed1d3d0bfc4447ecb27d05c4ebd537e,src/jvm/clojure.lang.PersistentVector,"private newPath(level int, node Node) : Node","private newPath(edit AtomicBoolean, level int, node Node) : Node"
653d6ee1fc4ffe7e60487a401298832faac18b48,src/jvm/clojure.lang.MultiFn,"public MultiFn(dispatchFn IFn, defaultDispatchVal Object, hierarchy IRef)","public MultiFn(name String, dispatchFn IFn, defaultDispatchVal Object, hierarchy IRef)"
2c0b7f60cbbc26b9efbf1a687b86d18bb39003a2,src/jvm/clojure.lang.MultiFn,"public MultiFn(dispatchFn IFn, defaultDispatchVal Object)","public MultiFn(dispatchFn IFn, defaultDispatchVal Object, hierarchy IRef)"
0859070dd1909f3e56b99b54c79aa4d7aaca8f74,src/jvm/clojure.lang.AStream.Seq,"package Seq(first Object, src Callable)","package Seq(first Object, pushed ISeq, src IFn)"
06d3b59c23ef90c9410470652ed6fc408d360716,src/jvm/clojure.lang.Atom,"public swap(f IFn, args ISeq) : Object","public swap(f IFn, x Object, y Object, args ISeq) : Object"
96757ae6fe6651f2753f7495a6ff476ed72c1798,src/jvm/clojure.lang.Compiler,"package getMatchingParams(methodName String, paramlists ArrayList, argexprs IPersistentVector) : int","package getMatchingParams(methodName String, paramlists ArrayList, argexprs IPersistentVector, rets List) : int"
170bace615638e8ef0aae1db1e86341b2032db2c,src/jvm/clojure.lang.Compiler,"public resolveIn(n Namespace, sym Symbol) : Object","public resolveIn(n Namespace, sym Symbol, allowPrivate boolean) : Object"
9bc5b30329913113c8a8310260b2c8d17cb0e0e3,src/jvm/clojure.lang.Compiler.InstanceMethodExpr,"public InstanceMethodExpr(line int, target Expr, methodName String, args IPersistentVector)","public InstanceMethodExpr(source String, line int, target Expr, methodName String, args IPersistentVector)"
9bc5b30329913113c8a8310260b2c8d17cb0e0e3,src/jvm/clojure.lang.Compiler.StaticMethodExpr,"public StaticMethodExpr(line int, c Class, methodName String, args IPersistentVector)","public StaticMethodExpr(source String, line int, c Class, methodName String, args IPersistentVector)"
9bc5b30329913113c8a8310260b2c8d17cb0e0e3,src/jvm/clojure.lang.Compiler.InvokeExpr,"public InvokeExpr(line int, tag Symbol, fexpr Expr, args IPersistentVector)","public InvokeExpr(source String, line int, tag Symbol, fexpr Expr, args IPersistentVector)"
9bc5b30329913113c8a8310260b2c8d17cb0e0e3,src/jvm/clojure.lang.Compiler.DefExpr,"public DefExpr(var Var, init Expr, meta Expr, initProvided boolean)","public DefExpr(source String, line int, var Var, init Expr, meta Expr, initProvided boolean)"
3f4cc942979188f9abcf32c04bcdd308df143769,src/jvm/clojure.lang.Compiler.TryExpr,"public TryExpr(tryExpr Expr, catchExprs PersistentVector, finallyExpr Expr)","public TryExpr(tryExpr Expr, catchExprs PersistentVector, finallyExpr Expr, retLocal int, finallyLocal int)"
c98a632c86515d2c7c133608d07b8b33bcfa75fc,src/jvm/clojure.lang.Compiler,public isInline(op Object) : IFn,"public isInline(op Object, arity int) : IFn"
26dc63797bf65aeedb91d01dbf6edf2f339e972a,src/jvm/clojure.lang.Compiler,"package getMatchingParams(paramlists ArrayList, argexprs IPersistentVector) : int","package getMatchingParams(methodName String, paramlists ArrayList, argexprs IPersistentVector) : int"
1527b871c6edb798c7b8877d95864fbba3aca5fc,src/jvm/clojure.lang.Agent,"public dispatch(fn IFn, args ISeq) : Object","public dispatch(fn IFn, args ISeq, solo boolean) : Object"
1527b871c6edb798c7b8877d95864fbba3aca5fc,src/jvm/clojure.lang.Agent.Action,"public Action(agent Agent, fn IFn, args ISeq)","public Action(agent Agent, fn IFn, args ISeq, solo boolean)"
dd665dc8a62f7636c3e26dbbddd92b1089294e31,src/jvm/clojure.lang.PersistentVector,"package PersistentVector(meta IPersistentMap, cnt int, shift int, root Object[])","package PersistentVector(meta IPersistentMap, cnt int, shift int, root Object[], tail Object[])"
dd665dc8a62f7636c3e26dbbddd92b1089294e31,src/jvm/clojure.lang.PersistentVector,"package PersistentVector(cnt int, shift int, root Object[])","package PersistentVector(cnt int, shift int, root Object[], tail Object[])"
df498fe4972a46a89cf06248af1712bae5d4a83a,src/jvm/clojure.lang.Var,"public intern(sym Symbol, root Object) : Var","public intern(ns Namespace, sym Symbol, root Object) : Var"
df498fe4972a46a89cf06248af1712bae5d4a83a,src/jvm/clojure.lang.Var,"private Var(sym Symbol, root Object)","package Var(ns Namespace, sym Symbol, root Object)"
df498fe4972a46a89cf06248af1712bae5d4a83a,src/jvm/clojure.lang.Var,private Var(sym Symbol),"package Var(ns Namespace, sym Symbol)"
fa30aeed53960838cdcc5d0437fdccab0e9be828,src/jvm/clojure.lang.Compiler.NewExpr,"public NewExpr(className String, args IPersistentVector)","public NewExpr(className String, args IPersistentVector, line int)"
7c2ef5d06bde5b0475e4523b7b4d47ed4bcfe52e,src/jvm/clojure.lang.Compiler.HostExpr,private maybeClassName(form Object) : String,"private maybeClassName(form Object, stringOk boolean) : String"
3d5084fe755c815a09211e2678a89df8e50ea114,src/jvm/clojure.lang.Compiler.DefExpr,"public DefExpr(var Var, init Expr, initProvided boolean)","public DefExpr(var Var, init Expr, initProvided boolean, tag Symbol)"
139ddd146f2a272b7ddda397f54b501ff499c643,src/jvm/clojure.lang.LockingTransaction,"package doCommute(ref TRef, fn IFn) : Object","package doCommute(ref TRef, fn IFn, args ISeq) : Object"
139ddd146f2a272b7ddda397f54b501ff499c643,src/jvm/clojure.lang.TRef,public commute(fn IFn) : Object,"public commute(fn IFn, args ISeq) : Object"
7b1999c497f9e39c01a2b9f5d628f22df701c0e3,src/jvm/clojure.lang.FnSeq,"public FnSeq(meta IPersistentMap, first Object, rest Delay)","public FnSeq(meta IPersistentMap, first Object, restFn IFn, rest ISeq)"
134557050ec4858b4d1ac2af8b600adbfe3f4f49,src/jvm/clojure.lang.PolyFn,"private PolyFn(meta IPersistentMap, dispatchFn IFn, dispatchTable IPersistentMap)","private MultiFn(meta IPersistentMap, dispatchFn IFn, defaultFn IFn, dispatchTable IPersistentMap)"
134557050ec4858b4d1ac2af8b600adbfe3f4f49,src/jvm/clojure.lang.PolyFn,public PolyFn(dispatchFn IFn),"public MultiFn(dispatchFn IFn, defaultFn IFn)"
d041b1fe404e73fb01ee572825d32a1d9df731d7,src/jvm/clojure.lang.Compiler,"private registerLocal(sym Symbol, javaClass Class) : LocalBinding","private registerLocal(sym Symbol, tag Symbol, init Expr) : LocalBinding"
d041b1fe404e73fb01ee572825d32a1d9df731d7,src/jvm/clojure.lang.Compiler.LocalBinding,"public LocalBinding(num int, sym Symbol, javaClass Class)","public LocalBinding(num int, sym Symbol, tag Symbol, init Expr)"
2e738a7306bd887eefc3799778b0deee2cb126c2,src/jvm/clojure.lang.Compiler.InvokeExpr,"public InvokeExpr(line int, fexpr Expr, args IPersistentVector)","public InvokeExpr(line int, tag Symbol, fexpr Expr, args IPersistentVector)"
1c442977ae85c994c1085ccab79139d653c517b7,src/jvm/clojure.lang.Compiler.InstanceMethodExpr,"public InstanceMethodExpr(target Expr, methodName String, args IPersistentVector)","public InstanceMethodExpr(line int, target Expr, methodName String, args IPersistentVector)"
1c442977ae85c994c1085ccab79139d653c517b7,src/jvm/clojure.lang.Compiler.StaticMethodExpr,"public StaticMethodExpr(className String, methodName String, args IPersistentVector)","public StaticMethodExpr(line int, className String, methodName String, args IPersistentVector)"
1c442977ae85c994c1085ccab79139d653c517b7,src/jvm/clojure.lang.Compiler.InstanceFieldExpr,"public InstanceFieldExpr(target Expr, fieldName String)","public InstanceFieldExpr(line int, target Expr, fieldName String)"
1c442977ae85c994c1085ccab79139d653c517b7,src/jvm/clojure.lang.Compiler.StaticFieldExpr,"public StaticFieldExpr(className String, fieldName String)","public StaticFieldExpr(line int, className String, fieldName String)"
d7f39a425ce621b86d1fb23ba36ae711c262aba3,src/jvm/clojure.lang.Compiler.IfExpr,"public IfExpr(testExpr Expr, thenExpr Expr, elseExpr Expr)","public IfExpr(line int, testExpr Expr, thenExpr Expr, elseExpr Expr)"
d7f39a425ce621b86d1fb23ba36ae711c262aba3,src/jvm/clojure.lang.Compiler.InvokeExpr,"public InvokeExpr(fexpr Expr, args IPersistentVector)","public InvokeExpr(line int, fexpr Expr, args IPersistentVector)"
dfb7e514c4ab8a2c878b6deaa27d984f54b5d248,src/jvm/clojure.lang.BytecodeCompiler.DefExpr,"public DefExpr(var Var, init Expr)","public DefExpr(var Var, init Expr, initProvided boolean)"
54acb784b9b1872195466924377ec49587f88f58,src/jvm/clojure.lang.BytecodeCompiler,package lookupVar(sym Symbol) : Var,"package lookupVar(sym Symbol, internNew boolean) : Var"
aeb160665adff7925207d7f60f3a7fdf5837cad0,src/jvm/clojure.lang.BytecodeCompiler,private registerLocal(b LocalBinding) : void,"private registerLocal(sym Symbol, tag Symbol) : LocalBinding"
acb5edd8085bff75b8940fa4a70ca317961e471f,src/jvm/clojure.lang.BytecodeCompiler,"private analyzeSeq(context C, form ISeq) : Expr","private analyzeSeq(context C, form ISeq, name String) : Expr"
acb5edd8085bff75b8940fa4a70ca317961e471f,src/jvm/clojure.lang.BytecodeCompiler.FnExpr,"package parse(context C, form ISeq) : Expr","package parse(context C, form ISeq, name String) : Expr"
8b21472e502732159b4d2e3fa20b25089cfd9c79,src/jvm/clojure.lang.DynamicVar,public DynamicVar(root Object),"private DynamicVar(sym Symbol, root Object)"
32ed38ea8f0dde2b8d3ac5b489510ebd359da979,src/jvm/clojure.lang.TStamp,public TStamp(tpoint long),"public TStamp(tpoint long, status Status)"
76e5252aaf17760df635115999bc212a860c8b9d,src/jvm/clojure.lang.TVal,"package TVal(val Object, tstamp TStamp)","package TVal(val Object, tstamp TStamp, prior TVal)"
fa6d4d3681917738c1acf5653239c19872bf71d9,src/jvm/clojure.lang.PersistentHashMap.Node,"public assoc(shift int, hash int, key Object, val Object) : INode","public assoc(shift int, hash int, key Object, val Object, addedLeaf Box) : INode"
fa6d4d3681917738c1acf5653239c19872bf71d9,src/jvm/clojure.lang.PersistentHashMap.Node,"package create(shift int, leaf ILeaf, hash int, key Object, val Object) : INode","package create(shift int, leaf ILeaf, hash int, key Object, val Object, addedLeaf Box) : INode"
fa6d4d3681917738c1acf5653239c19872bf71d9,src/jvm/clojure.lang.PersistentHashMap.HashCollisionLeaf,"public assoc(shift int, hash int, key Object, val Object) : INode","public assoc(shift int, hash int, key Object, val Object, addedLeaf Box) : INode"
ad0302cd67dc50695a9348178065f0ec090b9890,src/jvm/clojure.lang.Compiler,private analyzeSymbol(sym Symbol) : Expr,"private analyzeSymbol(sym Symbol, inFnPosition boolean) : Expr"
28fe593fca2b06b203cb3ce3e6b7ea3eee7dd9a7,src/jvm/clojure.lang.PersistentArray.Master,"package Master(size int, defaultVal Object, loadFactor float)","package Master(size int, defaultVal Object, loadFactor float, basis int[])"
b9b9ceb459f528347f2433357697370fa3fa67b4,src/jvm/clojure.lang.PersistentHashtableMap.Seq,"package next(buckets PersistentArray, b int, e ISeq) : Seq","package next(buckets PersistentArray, b int, e ISeq, cnt int) : Seq"
b9b9ceb459f528347f2433357697370fa3fa67b4,src/jvm/clojure.lang.PersistentTreeMap.Seq,"package create(t Node, asc boolean) : Seq","package create(t Node, asc boolean, cnt int) : Seq"
b9b9ceb459f528347f2433357697370fa3fa67b4,src/jvm/clojure.lang.PersistentHashtableMap.Seq,public create(buckets PersistentArray) : Seq,"public create(buckets PersistentArray, cnt int) : Seq"
b9b9ceb459f528347f2433357697370fa3fa67b4,src/jvm/clojure.lang.PersistentHashtableMap.Seq,"package Seq(buckets PersistentArray, b int, e ISeq)","package Seq(buckets PersistentArray, b int, e ISeq, cnt int)"
b9b9ceb459f528347f2433357697370fa3fa67b4,src/jvm/clojure.lang.PersistentTreeMap.Seq,"public Seq(stack ISeq, asc boolean)","public Seq(stack ISeq, asc boolean, cnt int)"
e5fafd352e9351e1f55b1fac0de911e1dc3b632a,src/jvm/clojure.lang.PersistentQueue,"package PersistentQueue(f ISeq, r PersistentArrayList)","package PersistentQueue(f ISeq, r PersistentArrayList, meta IPersistentMap)"
0c422d65c6dc16d9e2887695ee5f6fa3e07fe617,src/jvm/clojure.lang.PersistentTreeMap,"package PersistentTreeMap(comp Comparator, tree Node, count int)","package PersistentTreeMap(comp Comparator, tree Node, count int, meta IPersistentMap)"
0c422d65c6dc16d9e2887695ee5f6fa3e07fe617,src/jvm/clojure.lang.PersistentListIdentityMap.Link,"package Link(key Object, val Object, next PersistentListIdentityMap)","package Link(key Object, val Object, next PersistentListIdentityMap, meta IPersistentMap)"
0c422d65c6dc16d9e2887695ee5f6fa3e07fe617,src/jvm/clojure.lang.PersistentListMap.Link,"package Link(key Object, val Object, next PersistentListMap)","package Link(key Object, val Object, next PersistentListMap, meta IPersistentMap)"
0c422d65c6dc16d9e2887695ee5f6fa3e07fe617,src/jvm/clojure.lang.PersistentListIdentityMap.Tail,"package Tail(key Object, val Object)","package Tail(key Object, val Object, meta IPersistentMap)"
0c422d65c6dc16d9e2887695ee5f6fa3e07fe617,src/jvm/clojure.lang.PersistentListMap.Tail,"package Tail(key Object, val Object)","package Tail(key Object, val Object, meta IPersistentMap)"
45928ffe7f2b9e59633fb7931f2a3c75c9d6589f,src/jvm/clojure.lang.PersistentListIdentityMap,public add(key Object) : IPersistentMap,"public add(key Object, val Object) : IPersistentMap"
45928ffe7f2b9e59633fb7931f2a3c75c9d6589f,src/jvm/clojure.lang.PersistentListMap,public add(key Object) : IPersistentMap,"public add(key Object, val Object) : IPersistentMap"
8e50dd7ed5a321d6fd2a1f8f0c9d0ef19fbed2f1,src/org.clojure.runtime.PersistentArray.Master,"package Master(size int, defaultVal Object)","package Master(size int, defaultVal Object, loadFactor double)"
08e27be5bba0400b651ed7877e72ff48bbdd6ccc,src/org.clojure.runtime.Obj,public get(key Comparable) : Object,"public get(tld ThreadLocalData, key Comparable) : Object"
08e27be5bba0400b651ed7877e72ff48bbdd6ccc,src/org.clojure.runtime.Obj,public has(key Comparable) : boolean,"public has(tld ThreadLocalData, key Comparable) : boolean"
08e27be5bba0400b651ed7877e72ff48bbdd6ccc,src/org.clojure.runtime.Obj,"public put(key Comparable, val Object) : Object","public put(tld ThreadLocalData, key Comparable, val Object) : Object"
7e7516821258dd51e411b51a8851c54320f64dc3,src/org.clojure.runtime.RBSet,"package add(t Node, key Object) : Node","package add(t Node, key Object, val Object, found Box) : Node"
dd69b27bae9fec5dadd3b57670d2f0c0a14349f1,src/org.clojure.runtime.Reflector,"public getMethods(c Class, arity int, name String) : List","public getMethods(c Class, arity int, name String, getStatics boolean) : List"
dd69b27bae9fec5dadd3b57670d2f0c0a14349f1,src/org.clojure.runtime.Reflector,"public getField(c Class, name String) : Field","public getField(c Class, name String, getStatics boolean) : Field"
